{"ast":null,"code":"const makeRequest = async query => {\n  const response = await fetch(\"http://localhost:7000/query\", {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: query\n    })\n  });\n  const data = await response.json();\n  return data;\n};\nexport const handleCreateView = async (viewname = \"\") => {\n  const query = `CREATE TABLE ${viewname.toLowerCase()} (prim_id text PRIMARY KEY);`;\n  await makeRequest(query);\n  const updateViewsTable = `INSERT INTO schemas(id, viewname, schema_object) VALUES ('a${Math.round(Math.random() * 10000000)}', '${viewname.toLowerCase()}', '${JSON.stringify({\n    name: viewname,\n    subViews: []\n  })}');`;\n  await makeRequest(updateViewsTable);\n};\nexport const handleSubViewCreate = async (viewname, subviewname, subviewtype, updatedSchema) => {\n  const updateSchemaTable = `UPDATE schemas SET schema_object = '${JSON.stringify(updatedSchema)}' WHERE viewname = '${viewname.toLowerCase()}';`;\n  await makeRequest(updateSchemaTable);\n  if (subviewtype === \"form\") {\n    //do nothing \n  } else if (subviewtype === \"table\") {\n    // create new table \n    const createSubveiewTable = `CREATE TABLE ${viewname.toLowerCase()}_${subviewname.toLowerCase()} (prim_id TEXT PRIMARY KEY, ${viewname.toLowerCase()}_id TEXT, FOREIGN KEY (${viewname.toLowerCase()}_id) REFERENCES ${viewname.toLowerCase()}(prim_id));`;\n    await makeRequest(createSubveiewTable);\n  }\n};\nexport const handleFieldAdd = async (viewname, subviewname, subviewtype, name, updatedSchema) => {\n  const updateSchemaTable = `UPDATE schemas SET schema_object = '${JSON.stringify(updatedSchema)}' WHERE viewname = '${viewname.toLowerCase()}';`;\n  await makeRequest(updateSchemaTable);\n  if (subviewtype === \"form\") {\n    const updateViewsTable = `ALTER TABLE ${viewname.toLowerCase()} ADD COLUMN ${name.toLowerCase()} VARCHAR(255);`;\n    await makeRequest(updateViewsTable);\n  } else if (subviewtype === \"table\") {\n    const createFieldQuery = `ALTER TABLE ${viewname.toLowerCase()}_${subviewname.toLowerCase()} ADD COLUMN ${name.toLowerCase()} VARCHAR(255);`;\n    await makeRequest(createFieldQuery);\n  }\n};\nexport const addFormData = async (viewname, data, subviewobject) => {\n  const t = `a${Math.round(Math.random() * 10000000)}`;\n  const names = [\"prim_id\"];\n  const values = [];\n  values.push(`'${t}'`);\n  subviewobject.fields.forEach(field => {\n    names.push(`${field.name.toLowerCase()}`);\n    values.push(`'${data[field.name.toLowerCase()]}'`);\n  });\n  const insertQuery = `INSERT INTO ${viewname.toLowerCase()} (${names.join(\", \")}) VALUES (${values.join(\", \")});`;\n  await makeRequest(insertQuery);\n  return t;\n};\nexport const addTableData = async (viewname, viewid, data, subviewobject) => {\n  const t = `a${Math.round(Math.random() * 10000000)}`;\n  const names = [`${viewname.toLowerCase()}_id`, `prim_id`];\n  const values = [`'${viewid}'`, `'${t}'`];\n  subviewobject.fields.forEach(field => {\n    names.push(`${field.name.toLowerCase()}`);\n    values.push(`'${data[field.name.toLowerCase()]}'`);\n  });\n  const insertQuery = `INSERT INTO ${viewname.toLowerCase()}_${subviewobject.name.toLowerCase()} (${names.join(\", \")}) VALUES (${values.join(\", \")});`;\n  await makeRequest(insertQuery);\n};\nexport async function getFormData(viewname, id) {\n  const query = `SELECT * FROM ${viewname.toLowerCase()} WHERE prim_id = '${id}';`;\n  const response = await makeRequest(query);\n  return response.rows[0];\n}\nexport async function getTableData(viewname, subviewname, id) {\n  const query = `SELECT * FROM ${viewname.toLowerCase()}_${subviewname.toLowerCase()} WHERE ${viewname.toLowerCase()}_id = '${id}';`;\n  const response = await makeRequest(query);\n  return response.rows;\n}\nexport async function getSchemaObject(viewname) {\n  const query = `SELECT schema_object FROM schemas WHERE viewname = '${viewname.toLowerCase()}';`;\n  const response = await makeRequest(query);\n  return response.rows[0].schema_object;\n}\nexport async function updateTableData(viewname, subviewname, id, data, subviewobject) {\n  const names = [];\n  subviewobject.fields.forEach(field => {\n    if (field !== \"prim_id\") names.push(`${field.name.toLowerCase()} = '${data[field.name.toLowerCase()]}'`);\n  });\n  const tableName = `${viewname.toLowerCase()}_${subviewname.toLowerCase()}`;\n  const updateQuery = `UPDATE ${tableName} SET ${names.join(\", \")} WHERE prim_id = '${id}';`;\n  await makeRequest(updateQuery);\n}","map":{"version":3,"names":["makeRequest","query","response","fetch","method","headers","body","JSON","stringify","data","json","handleCreateView","viewname","toLowerCase","updateViewsTable","Math","round","random","name","subViews","handleSubViewCreate","subviewname","subviewtype","updatedSchema","updateSchemaTable","createSubveiewTable","handleFieldAdd","createFieldQuery","addFormData","subviewobject","t","names","values","push","fields","forEach","field","insertQuery","join","addTableData","viewid","getFormData","id","rows","getTableData","getSchemaObject","schema_object","updateTableData","tableName","updateQuery"],"sources":["C:/Users/sameer/Downloads/project Form/front/src/helper.js"],"sourcesContent":["const makeRequest = async (query) => {\n    const response = await fetch(\"http://localhost:7000/query\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            query: query\n        })\n    });\n    const data = await response.json();\n    return data;\n};\n\nexport const handleCreateView = async (viewname = \"\") => {\n    const query = `CREATE TABLE ${viewname.toLowerCase()} (prim_id text PRIMARY KEY);`;\n    await makeRequest(query);\n    const updateViewsTable = `INSERT INTO schemas(id, viewname, schema_object) VALUES ('a${Math.round(Math.random() * 10000000)}', '${viewname.toLowerCase()}', '${JSON.stringify({\n        name: viewname,\n        subViews: []\n    })}');`;\n    await makeRequest(updateViewsTable);\n}\n\nexport const handleSubViewCreate = async (viewname, subviewname, subviewtype, updatedSchema) => {\n    const updateSchemaTable = `UPDATE schemas SET schema_object = '${JSON.stringify(updatedSchema)}' WHERE viewname = '${viewname.toLowerCase()}';`;\n    await makeRequest(updateSchemaTable);\n    if (subviewtype === \"form\") {\n        //do nothing \n    } else if (subviewtype === \"table\") {\n        // create new table \n        const createSubveiewTable = `CREATE TABLE ${viewname.toLowerCase()}_${subviewname.toLowerCase()} (prim_id TEXT PRIMARY KEY, ${viewname.toLowerCase()}_id TEXT, FOREIGN KEY (${viewname.toLowerCase()}_id) REFERENCES ${viewname.toLowerCase()}(prim_id));`;\n        await makeRequest(createSubveiewTable);\n    }\n};\n\nexport const handleFieldAdd = async (viewname, subviewname, subviewtype, name, updatedSchema) => {\n    const updateSchemaTable = `UPDATE schemas SET schema_object = '${JSON.stringify(updatedSchema)}' WHERE viewname = '${viewname.toLowerCase()}';`;\n    await makeRequest(updateSchemaTable);\n    if (subviewtype === \"form\") {\n        const updateViewsTable = `ALTER TABLE ${viewname.toLowerCase()} ADD COLUMN ${name.toLowerCase()} VARCHAR(255);`;\n        await makeRequest(updateViewsTable);\n    } else if (subviewtype === \"table\") {\n        const createFieldQuery = `ALTER TABLE ${viewname.toLowerCase()}_${subviewname.toLowerCase()} ADD COLUMN ${name.toLowerCase()} VARCHAR(255);`;\n        await makeRequest(createFieldQuery);\n    }\n};\n\nexport const addFormData = async (viewname, data, subviewobject) => {\n    const t = `a${Math.round(Math.random() * 10000000)}`;\n    const names = [\"prim_id\"];\n    const values = [];\n    values.push(`'${t}'`);\n    subviewobject.fields.forEach(field => {\n        names.push(`${field.name.toLowerCase()}`);\n        values.push(`'${data[field.name.toLowerCase()]}'`);\n    });\n    const insertQuery = `INSERT INTO ${viewname.toLowerCase()} (${names.join(\", \")}) VALUES (${values.join(\", \")});`;\n    await makeRequest(insertQuery);\n    return t;\n};\n\nexport const addTableData = async (viewname, viewid, data, subviewobject,) => {\n    const t = `a${Math.round(Math.random() * 10000000)}`\n    const names = [`${viewname.toLowerCase()}_id`, `prim_id`];\n    const values = [`'${viewid}'`, `'${t}'`];\n    subviewobject.fields.forEach(field => {\n        names.push(`${field.name.toLowerCase()}`);\n        values.push(`'${data[field.name.toLowerCase()]}'`);\n    });\n    const insertQuery = `INSERT INTO ${viewname.toLowerCase()}_${subviewobject.name.toLowerCase()} (${names.join(\", \")}) VALUES (${values.join(\", \")});`;\n    await makeRequest(insertQuery);\n}\n\nexport async function getFormData(viewname, id) {\n    const query = `SELECT * FROM ${viewname.toLowerCase()} WHERE prim_id = '${id}';`;\n    const response = await makeRequest(query);\n    return response.rows[0];\n}\n\nexport async function getTableData(viewname, subviewname, id) {\n    const query = `SELECT * FROM ${viewname.toLowerCase()}_${subviewname.toLowerCase()} WHERE ${viewname.toLowerCase()}_id = '${id}';`;\n    const response = await makeRequest(query);\n    return response.rows;\n}\n\nexport async function getSchemaObject(viewname) {\n    const query = `SELECT schema_object FROM schemas WHERE viewname = '${viewname.toLowerCase()}';`;\n    const response = await makeRequest(query);\n    return response.rows[0].schema_object;\n}\n\nexport async function updateTableData(viewname, subviewname, id, data, subviewobject) {\n    const names = [];\n    subviewobject.fields.forEach(field => {\n        if (field !== \"prim_id\")\n            names.push(`${field.name.toLowerCase()} = '${data[field.name.toLowerCase()]}'`);\n    });\n    const tableName = `${viewname.toLowerCase()}_${subviewname.toLowerCase()}`\n    const updateQuery = `UPDATE ${tableName} SET ${names.join(\", \")} WHERE prim_id = '${id}';`;\n    await makeRequest(updateQuery);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}